{"externalSystemID":56,"name":"metlife_snow_problem","autoBond":"#if (!$model.radarTicket.ipimTicketMapping.ipimTicket.getQueue().getName().endsWith('-problem-mgmt'))\r\n    This is not a Problem ticket.  Autobonding ignored.\r\n#end","factory":"databasedrivenproblem","templateEngine":"VELOCITY","snippets":[{"externalSystemId":56,"id":30,"name":"javascriptSnippetTest","templateEngine":"JAVASCRIPT","template":"function doAwesome(awesome){\n    if(awesome!=\"awesome\"){\n        awesome = \"awesome\";\n    }\n    return awesome;\n}","invocation":"doAwesome()"},{"externalSystemId":56,"id":27,"name":"handleBase64Attachments","templateEngine":"VELOCITY","template":"#macro(handleBase64Attachments $objRef)\r\n#if($objRef.filename.endsWith(\".QAencode64\"))$objRef.content#else$encodingHelper.encodeBase64($objRef.getContentBytes())#end\r\n#end","invocation":"#handleBase64Attachments($objRef)"},{"externalSystemId":56,"id":29,"name":"dueDateHandler","templateEngine":"JAVASCRIPT","template":"function dueDateHandler(impact, urgency){\r\n//  these are comign in like \"1 - High\"\r\n    if(!urgency){urgency=5;}\r\n    if(!impact){impact=5;}\r\n    impact = impact.substring(0,1);\r\n    urgency = urgency.substring(0,1);\r\n  console.log(\"TEST: Impact: \"+impact+\" and URGENCY: \"+urgency);\r\n//\r\n    var todayDate = new Date();\r\n    var priority = 0;  // priority is not 'strictly' necessary. using it to keep track though/debug\r\n    var addedDays = 0;\r\n    if ( ( impact == \"1\" && (urgency == \"1\" || urgency == \"2\") ) || ( impact == \"2\" && urgency == \"1\") ){\r\n    //    p1 is +11 days\r\n        priority = \"1\";\r\n        addedDays = 11;\r\n    }\r\n    if ( ( impact == \"1\" && (urgency == \"3\" || urgency == \"4\") ) || ( impact == \"2\" && urgency == \"2\") || ( impact == \"3\" && urgency == \"1\") ){\r\n    //    P2 is +16 days\r\n        priority = \"2\" ;\r\n        addedDays = 16;\r\n    }\r\n    if ( ( impact == \"2\" && (urgency == \"3\" || urgency == \"4\") ) || ( impact == \"3\" && (urgency == \"2\" || urgency == \"3\") ) || ( impact == \"4\" && urgency == \"1\") ){\r\n    //    P3 is +30 days\r\n        priority = \"3\" ;\r\n        addedDays = 30;\r\n    }\r\n    if ( ( impact == \"1\" && urgency == \"5\" ) || ( impact == \"2\" && urgency == \"5\") || ( impact == \"3\" && urgency == \"4\") || ( impact == \"4\" && (urgency == \"2\" || urgency == \"3\") ) ){\r\n    //    4 is +60 days\r\n        priority = \"4\" ;\r\n        addedDays = 60;\r\n    }\r\n    if ( ( impact == \"3\" && urgency == \"5\" ) || ( impact == \"4\" && (urgency == \"4\" || urgency == \"5\") ) ){\r\n    //    P5 is ???  unknown.  leaving at 60 along with p4 for now.\r\n        priority = \"5\" ;\r\n        addedDays = 60;\r\n    }\r\n    else{addedDays=180;}\r\n//  the code is used here to get around weierd Calendar math.\r\n    todayDate.setDate(todayDate.getDate() + addedDays);\r\n// //  //\r\n// //tear it apart, now, to get pieces to rebuild into expected format\r\n    var year = todayDate.getFullYear();\r\n// //adding zero and slicing should only add a zero if necessary, and slice off excess if it is a double digit. same for the others.\r\n    var day = (\"0\" + todayDate.getDate().toString().slice(-2));\r\n    var month = (\"0\" + (todayDate.getMonth()+1).toString().slice(-2) );\r\n    var hr = todayDate.getHours();\r\n    var min = (\"0\" + (todayDate.getMinutes()).toString().slice(-2) ) ;\r\n//\r\n// // isoDate is pulled apart and put together this way because Javascript/JSON is weird about dates here. we need this exact format (with the \"T\" in the middle)\r\n    var isoDate = year+\"/\"+month+\"/\"+day+\"T\"+hr+\":\"+min+\":\"+\"00\";\r\n//// isoDate here should be the correct format for DueDate\r\n    return isoDate;\r\n    //print(\"Impact is \"+impact+\" and Urgency is \"+urgency+\"\\n which makes the priority \"+priority+\", the number of days to add is \"+addedDays+\" and the date:\\n\"+ isoDate);\r\n    // instead of print, it'd be a return of isoDate in final\r\n}","invocation":"dueDateHandler()"},{"externalSystemId":56,"id":26,"name":"forceEbStateErr","templateEngine":"VELOCITY","template":"#macro (forceEbStateError $wording)\r\n    #if ( ! $wording )\r\n        #set ($wording = \"QA Error Text (example)\")\r\n    #end\r\n    $commonUtil.forceEBondingTicketStateError(\"velocity\", $model.getLastLog(), $wording)\r\n#end","invocation":"#forceEbStateError($wording)"},{"externalSystemId":56,"id":22,"name":"getPopulatedJsonInc","templateEngine":"VELOCITY","template":"#macro (getPopulatedJsonInc)\r\n##\r\n## callingSystem is static\r\n##\r\n    #set ($callingSystem = '11222')\r\n##\r\n## Set dynamic IPradar values - these will use the ticket data\r\n##   \r\n    #set ($shortDescription = \"$!model.radarTicket.description.replaceAll('\\s+', ' ')\")\r\n    #set ($vendorTicketNumber = \"$!model.radarTicket.ipimTicketMapping.ipimTicket.id\")\r\n##    #set ($assignmentGroup = \"$!model.radarTicket.ipimTicketMapping.ipimTicket.getQueue().getDescription()\")\r\n##\r\n## Set the description\r\n##\r\n    #set ($descIPradarCustomField = \"$!model.getTicketAttributeValue('description')\")\r\n## May not be necessary, as create should be IPC -> SNOW only\r\n    #if ($descIPradarCustomField != '')\r\n        ## Incident created from SNOW\r\n        #set ($descRaw = \"$descIPradarCustomField\")\r\n    #else\r\n        ## Incident created from IPC\r\n        #set ($descRaw = \"$model.radarTicket.note\")\r\n    #end\r\n    #set ($description = \"$velocityEscapeTool.javascript($descRaw)\")\r\n##\r\n## Set the workNotes\r\n##\r\n    #if ($model.lastLog.getAction() == \"PROBLEM_CREATE\")\r\n        ## CREATE\r\n        #if ($description != '')\r\n            ## CREATE from SNOW\r\n            #set ($workNotes = \"$description\")\r\n        #else\r\n            ## CREATE from IPC\r\n            #set ($workNotes = \"$velocityEscapeTool.javascript($model.radarTicket.note)\")\r\n        #end\r\n    #else\r\n        ## UPDATE\r\n        #set ($wnRaw = $model.lastLog.getTicketAttributeValue('Update Notes'))\r\n        #set ($workNotes = $velocityEscapeTool.javascript($wnRaw))\r\n    #end\r\n##\r\n## temporarily creating this as an empty variable to see if we can get this to not appear if there is nothing in rootCause\r\n#set ($rootCause = '')\r\n##\r\n##set root cause -- \r\n###if ($model.radarTicket.NOTSUREWHATTHISIS.rootCause)\r\n###set($rootCause=$model.radarTicket.NOTSUREWHATTHISIS.rootCause)\r\n###end\r\n##\r\n## Set IPradar priority\r\n##  ## This appears unnecessary, however leaving it in for the time being, because Radar Priority.\r\n    #set($ipradarPriority=\"other\")\r\n    #if ($model.radarTicket.criticality.getName())\r\n        #set($ipradarPriority=$model.radarTicket.criticality.getName())\r\n    #end\r\n##\r\n## Set Custom IPradar field values\r\n##\r\n##  NOTE: CURRENTLY SET FOR INCIDENT -- NEEDING PROBLEM CUSTOM FIELDS DEFINED? - LEAVING FOR EXAMPLE \r\n##\r\n    #set($cFieldMap = $model.radarTicket.customFields)\r\n    ## start of customField loop\r\n    #foreach ($mapEntry in $cFieldMap.entrySet())\r\n        ## assignmentGroup derived from $model.radarTicket.ipimTicketMapping.ipimTicket.getQueue().getDescription()\r\n        ###if ($mapEntry.key.getName().equals('assignmentGroup'))\r\n        ##    #set($assignmentGroup = $mapEntry.value.getValueAsString())\r\n        ###end\r\n        #if ($mapEntry.key.getName().equals('description'))\r\n            ###set ($description = $velocityEscapeTool.xml($mapEntry.value.getValueAsString()))\r\n            #set ($description = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('parentIncident'))\r\n            #set($parentIncident = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('causedByChange'))\r\n            #set($causedByChange = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('assignedTo'))\r\n            #set($assignedTo = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('reportedSource'))\r\n            #set($reportedSource = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('category'))\r\n            #set($category = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('subCategory'))\r\n            #set($subCategory = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('location'))\r\n            #set($location = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('contactType'))\r\n            #set($contactType = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('impact'))\r\n            #set($impact = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('urgency'))\r\n            #set($urgency = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('state'))\r\n            #set($state = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('configurationItem'))\r\n            #set($configurationItem = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('affectedCis'))\r\n            #set($affectedCis= $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('resolutionSteps'))\r\n            #set($resolutionSteps = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('resolutionCategory'))\r\n            #set($resolutionCategory = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('resolutionSubcategory'))\r\n            #set($resolutionSubcategory = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('resolutionCode'))\r\n            #set($resolutionCode = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('resolvedBy'))\r\n            #set($resolvedBy = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('incidentSubState'))\r\n            #set($subState = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('pendingReason'))\r\n            #set($pendingReason = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('caller'))\r\n            #set($caller = $mapEntry.value.getValueAsString())\r\n        #end\r\n        #if ($mapEntry.key.getName().equals('callerNumber'))\r\n            #set($callerNumber = $mapEntry.value.getValueAsString())\r\n        #end\r\n##        #if ($mapEntry.key.getName().equals('dueDate'))\r\n##            #set($dueDate = $mapEntry.value.getValueAsString())\r\n##        #end\r\n    #end\r\n##\r\n##    #set($impactNum = $impact)\r\n##    #set($urgencyNum = $velocityStringUtils.substring($urgency,0,1)) \r\n##DEBUG: passing i: $impactNum and u: $urgencyNum\r\n    #set($dueDate = $model.dueDateHandler($impact, $urgency))\r\nDEBOG LOGS WHICH BREAK JSON FORMATTING TO TROUBLESHOOT DATE\r\n##today:   $todayDate\r\n##addedDays: $addedDays\r\n##theDate:    $theDate\r\n##Time:    $theTime\r\n##Looking for format: yyyy-mm-ddThh:mm:ss\r\ndue:     $dueDate\r\n##\r\n##This is to set the default dueDate - a random number that works to test everything else\r\n##    #set($dueDate = '2018-08-15T12:00:00')\r\n##\r\n## Provide default values if nothing is defined to\r\n## ensure fullfillment of SNOW API requirements\r\n##\r\n    #if (!$caller)\r\n        #set ($caller = 'IPsoft IPcenter')\r\n    #end\r\n    #if (!$callerNumber)\r\n        #set ($callerNumber = '(000)000-0000')\r\n    #end\r\n    #if (!$reportedSource)\r\n        #set ($reportedSource = 'IPsoft IPcenter')\r\n    #end\r\n    ###if (!$assignedTo)\r\n    ##    #set ($assignedTo = 'IPsoft IPcenter')\r\n    ###end\r\n    #if (!$configurationItem)\r\n        #set ($configurationItem = 'ServerABC')\r\n    #end\r\n##  ##\r\n## Payload for CREATE/UPDATE\r\n##  ##\r\n{\r\n###if ($model.lastLog.getAction() == \"OPEN\")\r\n##    \"caller\": \"$!caller\",\r\n##    \"callerNumber\": \"$!callerNumber\",\r\n    \"shortDescription\":\"$!shortDescription\",\r\n    \"description\":\"$!description\",\r\n    \"configurationItem\":\"$!configurationItem\",\r\n    \"vendorTicketNumber\":\"$!vendorTicketNumber\",\r\n    \"openedBy\":\"IPsoft IPcenter\",\r\n    \"reportedSource\":\"IPsoft IPcenter\",\r\n##hey, look! this needs to be fixed?  right not it should always be skipping.. \r\n#if ($rootCause != '')\r\n    \"rootCause\":\"$!rootCause\", \r\n#end\r\n###end\r\n#if ($assignedTo != '')\r\n    \"assignedTo\":\"$!assignedTo\",\r\n#end\r\n#if ($dueDate != '')\r\n    \"dueDate\":\"$!dueDate\",\r\n#end\r\n#if ($impact)\r\n    \"impact\":\"$!impact\",\r\n#end\r\n#if ($urgency)\r\n    \"urgency\":\"$!urgency\",\r\n#end\r\n###if ($state)\r\n##    \"state\":\"$!state\",\r\n###end\r\n#if ($workNotes)\r\n    \"workNotes\":\"$!workNotes\",\r\n#end\r\n###if ($assignedTo != '')\r\n##    \"assignedTo\":\"$!assignedTo\",\r\n###end\r\n#if ($model.radarTicket.status == \"RESOLVED\" && $state == 'Resolved')\r\n## for problem, add root cause, etc here\r\n    \"resolutionSteps\":\"$!resolutionSteps\",\r\n    \"resolutionCategory\":\"$!resolutionCategory\",\r\n    \"resolutionSubCategory\":\"$!resolutionSubcategory\",\r\n    \"resolutionCode\":\"$!resolutionCode\",\r\n    \"subState\":\"$!subState\",\r\n    ##\"resolvedBy\":\"$!resolvedBy\",\r\n#end\r\n###if ($state == 'Pending')\r\n##    \"pendingReason\":\"$!pendingReason\",\r\n###end\r\n## callingSystem is constant. Leaving it at the end to ensure valid JSON\r\n    \"callingSystem\":\"$!callingSystem\"\r\n}\r\n##\r\n#end","invocation":"#getPopulatedJsonInc()"}],"globalTicketAttributes":[{"globalTicketAttributeID":86,"name":"X-IBM-Client-Id","masked":false,"value":"f9c43403-05bc-4f59-9dc9-6899b0a4e032","templateEngine":"STATIC"},{"globalTicketAttributeID":95,"name":"emailNotify","masked":false,"value":"metlife-infrastructure-alerts@ipcenter-dv.metlife.com","templateEngine":"STATIC"},{"globalTicketAttributeID":76,"name":"endpointDomain","masked":false,"value":"https://dev.api.metlife.com/metlife/development","templateEngine":"STATIC"},{"globalTicketAttributeID":87,"name":"endpointPath","masked":false,"value":"/itsm-problems/process/problems","templateEngine":"STATIC"},{"globalTicketAttributeID":88,"name":"tokenAPIclientID","masked":true,"value":"f9c43403-05bc-4f59-9dc9-6899b0a4e032","templateEngine":"STATIC"},{"globalTicketAttributeID":89,"name":"tokenAPIfunctionalID","masked":true,"value":"AT112221","templateEngine":"STATIC"},{"globalTicketAttributeID":90,"name":"tokenAPIfunctionalIDPass","masked":true,"value":"SeER2fmHD5VB","templateEngine":"VELOCITY"},{"globalTicketAttributeID":91,"name":"tokenDbEndpoint","masked":false,"value":"##jdbc:mysql://ustry1metu01c4l.metnet.net:3307/ebonding?logger=com.mysql.jdbc.log.Slf4JLogger&profileSQL=false&dumpQueriesOnException=true&zeroDateTimeBehavior=convertToNull&jdbcCompliantTruncation=false&useOldAliasMetadataBehavior=true&LOG=DEBUG\njdbc:mysql://ustry1metu01c4l.metnet.net:3307/ebonding","templateEngine":"VELOCITY"},{"globalTicketAttributeID":92,"name":"tokenDbPass","masked":true,"value":"testing","templateEngine":"STATIC"},{"globalTicketAttributeID":93,"name":"tokenDbUser","masked":false,"value":"ebonding_tokens","templateEngine":"STATIC"},{"globalTicketAttributeID":94,"name":"tokenEndpointPath","masked":false,"value":"/authorization/token","templateEngine":"STATIC"}],"connectorEntities":[{"connectorID":61,"name":"SNOW.connector.IPC.create","parameters":[{"name":"body","templateEngine":"VELOCITY","template":"#getPopulatedJsonInc()"},{"name":"endpoint","templateEngine":"VELOCITY","template":"$model.getTicketAttributeValue('endpointDomain')$model.getTicketAttributeValue('endpointPath')"},{"name":"content-type","templateEngine":"STATIC","template":"application/json"},{"name":"Authorization","templateEngine":"VELOCITY","template":"Bearer $model.getTicketAttributeValue('accessToken')"},{"name":"X-IBM-Client-Id","templateEngine":"VELOCITY","template":"$model.getTicketAttributeValue('X-IBM-Client-Id')"},{"name":"MaxRetry","templateEngine":"STATIC","template":"10"},{"name":"RetryInterval","templateEngine":"STATIC","template":"2"}],"extractors":[{"attributeValidators":[],"attributeName":"RequestBody","template":"$request.body","pattern":"","templateEngine":"VELOCITY","phase":"request","type":"whole","global":false,"masked":false},{"attributeValidators":[],"attributeName":"ResponseBody","template":"$response.body","pattern":"","templateEngine":"VELOCITY","phase":"response","type":"whole","global":false,"masked":false},{"attributeValidators":[],"attributeName":"ExternalTicketID","template":"$response.body","pattern":".*\"number\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"final","type":"regex","global":true,"masked":false},{"attributeValidators":[],"attributeName":"ServiceNowID","template":"$response.body","pattern":".*\"id\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"final","type":"regex","global":true,"masked":false},{"attributeValidators":[],"attributeName":"Type","template":"$response.body","pattern":".*\"type\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"final","type":"regex","global":true,"masked":false},{"attributeValidators":[],"attributeName":"apiError","template":"$response.body","pattern":".*\"message\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"final","type":"regex","global":true,"masked":false},{"attributeValidators":[],"attributeName":"apiErrorStatus","template":"$response.body","pattern":".*\"status\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"final","type":"regex","global":true,"masked":false},{"attributeValidators":[],"attributeName":"apiErrorDetail","template":"$response.body","pattern":".*\"detail\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"final","type":"regex","global":true,"masked":false},{"attributeValidators":[],"attributeName":"httpCode","template":"$response.body","pattern":".*\"httpCode\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"final","type":"regex","global":true,"masked":false},{"attributeValidators":[],"attributeName":"httpMessage","template":"$response.body","pattern":".*\"httpMessage\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"final","type":"regex","global":true,"masked":false},{"attributeValidators":[],"attributeName":"httpMoreInformation","template":"$response.body","pattern":".*\"moreInformation\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"final","type":"regex","global":true,"masked":false},{"attributeValidators":[],"attributeName":"assignmentGroup","template":"$response.body","pattern":".*\"assignmentGroup\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"response","type":"regex","global":false,"masked":false}],"action":"POST","triggerType":"outgoing","connectorType":"http","allActions":["GET","POST","PUT","DELETE","PATCH"],"allParameters":["body","endpoint","ignore"],"allExtractors":[{"attributeValidators":null,"attributeName":"RequestBody","template":"$request.body","pattern":null,"templateEngine":"VELOCITY","phase":"request","type":"whole","global":false,"masked":false},{"attributeValidators":null,"attributeName":"ResponseBody","template":"$response.body","pattern":null,"templateEngine":"VELOCITY","phase":"response","type":"whole","global":false,"masked":false}]},{"connectorID":73,"name":"SNOW.connector.IPC.update","parameters":[{"name":"endpoint","templateEngine":"VELOCITY","template":"#if ($model.getTicketAttributeValue('ServiceNowID'))\n    #set ($sys_id = $model.getTicketAttributeValue('ServiceNowID'))\n#elseif ($model.getTicketAttributeValue('sys_id'))\n    #set ($sys_id = $model.getTicketAttributeValue('sys_id'))\n#else\n    #set($cFieldMap = $model.radarTicket.customFields)\n    ## start of customField loop\n    #foreach ($mapEntry in $cFieldMap.entrySet())\n        ##\n        #if ($mapEntry.key.getName().equals('sys_id'))\n            #set($sys_id = $mapEntry.value.getValueAsString())\n        #end\n    #end\n#end\n$model.getTicketAttributeValue('endpointDomain')$model.getTicketAttributeValue('endpointPath')/$sys_id\n##$model.getTicketAttributeValue('endpointDomain')$model.getTicketAttributeValue('endpointPath')"},{"name":"X-IBM-Client-Id","templateEngine":"VELOCITY","template":"$model.getTicketAttributeValue('X-IBM-Client-Id')"},{"name":"Authorization","templateEngine":"VELOCITY","template":"Bearer $model.getTicketAttributeValue('accessToken')"},{"name":"body","templateEngine":"VELOCITY","template":" #getPopulatedJsonInc()"},{"name":"RetryInterval","templateEngine":"STATIC","template":"2"},{"name":"MaxRetry","templateEngine":"STATIC","template":"10"},{"name":"content-type","templateEngine":"STATIC","template":"application/json"},{"name":"ignore","templateEngine":"VELOCITY","template":"#if($model.radarTicket.getIppmProblem().getStatus()==\"Resolved\")\nstatus: $model.radarTicket.getIppmProblem().getStatus()\n#end"}],"extractors":[{"attributeValidators":[],"attributeName":"RequestBody","template":"$request.body","pattern":"","templateEngine":"VELOCITY","phase":"request","type":"whole","global":false,"masked":false},{"attributeValidators":[],"attributeName":"ResponseBody","template":"$response.body","pattern":"","templateEngine":"VELOCITY","phase":"response","type":"whole","global":false,"masked":false},{"attributeValidators":[],"attributeName":"apiError","template":"$response.body","pattern":".*\"message\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"final","type":"regex","global":true,"masked":false},{"attributeValidators":[],"attributeName":"apiErrorStatus","template":"$response.body","pattern":".*\"status\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"final","type":"regex","global":true,"masked":false},{"attributeValidators":[],"attributeName":"apiErrorDetail","template":"$response.body","pattern":".*\"detail\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"final","type":"regex","global":true,"masked":false},{"attributeValidators":[],"attributeName":"httpCode","template":"$response.body","pattern":".*\"httpCode\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"final","type":"regex","global":true,"masked":false},{"attributeValidators":[],"attributeName":"httpMessage","template":"$response.body","pattern":".*\"httpMessage\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"final","type":"regex","global":true,"masked":false},{"attributeValidators":[],"attributeName":"httpMoreInformation","template":"$response.body","pattern":".*\"moreInformation\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"final","type":"regex","global":true,"masked":false},{"attributeValidators":[],"attributeName":"assignedTo","template":"$response.body","pattern":".*\"assignedTo\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"response","type":"regex","global":false,"masked":false},{"attributeValidators":[],"attributeName":"assignmentGroup","template":"$response.body","pattern":".*\"assignmentGroup\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"response","type":"regex","global":false,"masked":false}],"action":"PUT","triggerType":"outgoing","connectorType":"http","allActions":["GET","POST","PUT","DELETE","PATCH"],"allParameters":["body","endpoint","ignore"],"allExtractors":[{"attributeValidators":null,"attributeName":"RequestBody","template":"$request.body","pattern":null,"templateEngine":"VELOCITY","phase":"request","type":"whole","global":false,"masked":false},{"attributeValidators":null,"attributeName":"ResponseBody","template":"$response.body","pattern":null,"templateEngine":"VELOCITY","phase":"response","type":"whole","global":false,"masked":false}]},{"connectorID":74,"name":"TOKENDB.connector.IPC.check","parameters":[{"name":"body","templateEngine":"VELOCITY","template":"select access_token, token_type from ebonding.client_connector_tokens_metlife WHERE xibm_client_id = \"$model.getTicketAttributeValue('X-IBM-Client-Id')\" and expiry_date > now() LIMIT 1"},{"name":"endpoint","templateEngine":"VELOCITY","template":"$model.getTicketAttributeValue('tokenDbEndpoint')\n"},{"name":"database_username","templateEngine":"VELOCITY","template":"$model.getTicketAttributeValue('tokenDbUser')"},{"name":"database_password","templateEngine":"VELOCITY","template":"$model.getTicketAttributeValue('tokenDbPass')"}],"extractors":[{"attributeValidators":[],"attributeName":"RequestBody","template":"$request.body","pattern":"","templateEngine":"VELOCITY","phase":"ticket","type":"whole","global":false,"masked":false},{"attributeValidators":[],"attributeName":"ResponseBody","template":"$response.body","pattern":"","templateEngine":"VELOCITY","phase":"response","type":"whole","global":false,"masked":false},{"attributeValidators":[],"attributeName":"accessToken","template":"$response.body","pattern":".*\\[\\[([^,]+).*","templateEngine":"VELOCITY","phase":"final","type":"regex","global":true,"masked":false}],"action":"POST","triggerType":"outgoing","connectorType":"database","allActions":[],"allParameters":["body","endpoint","ignore","database_username","database_password"],"allExtractors":[]},{"connectorID":75,"name":"TOKENDB.connector.IPC.retrieve","parameters":[{"name":"endpoint","templateEngine":"VELOCITY","template":"$model.getTicketAttributeValue('endpointDomain')$model.getTicketAttributeValue('tokenEndpointPath')"},{"name":"ignore","templateEngine":"VELOCITY","template":"#if($model.lastLog.getTicketAttributeValue('TOKENDB.connector.IPC.check/accessToken'))\r\n    TOKENDB.connector.IPC.check returned a valid token (accessToken)\r\n#end"},{"name":"X-IBM-Client-Id","templateEngine":"VELOCITY","template":"$model.getTicketAttributeValue('X-IBM-Client-Id')"},{"name":"Authorization","templateEngine":"VELOCITY","template":"## Basic QVQxMTIyMjAxOmNhZDZPdWRh\n#set ($basicauth_raw = \"$model.getTicketAttributeValue('tokenAPIfunctionalID'):$model.getTicketAttributeValue('tokenAPIfunctionalIDPass')\")\nBasic $encodingHelper.encodeBase64($basicauth_raw)"}],"extractors":[{"attributeValidators":[],"attributeName":"RequestBody","template":"$request.body","pattern":"","templateEngine":"VELOCITY","phase":"request","type":"whole","global":false,"masked":false},{"attributeValidators":[],"attributeName":"ResponseBody","template":"$response.body","pattern":"","templateEngine":"VELOCITY","phase":"response","type":"whole","global":false,"masked":false},{"attributeValidators":[],"attributeName":"accessToken","template":"$response.body.replaceAll('\\s+', '')","pattern":".*\"access_token\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"final","type":"regex","global":true,"masked":false},{"attributeValidators":[],"attributeName":"accessTokenExpires","template":"$response.body.replaceAll('\\s+', '')","pattern":".*\"expires\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"final","type":"regex","global":true,"masked":false},{"attributeValidators":[],"attributeName":"accessTokenType","template":"$response.body.replaceAll('\\s+', '')","pattern":".*\"token_type\":\"([^\\\"]+).*","templateEngine":"VELOCITY","phase":"final","type":"regex","global":true,"masked":false}],"action":"GET","triggerType":"outgoing","connectorType":"http","allActions":["GET","POST","PUT","DELETE","PATCH"],"allParameters":["body","endpoint","ignore"],"allExtractors":[{"attributeValidators":null,"attributeName":"RequestBody","template":"$request.body","pattern":null,"templateEngine":"VELOCITY","phase":"request","type":"whole","global":false,"masked":false},{"attributeValidators":null,"attributeName":"ResponseBody","template":"$response.body","pattern":null,"templateEngine":"VELOCITY","phase":"response","type":"whole","global":false,"masked":false}]},{"connectorID":76,"name":"TOKENDB.connector.IPC.store","parameters":[{"name":"body","templateEngine":"VELOCITY","template":"#set ($accessToken = $model.getTicketAttributeValue('accessToken').replaceAll('\\s+', ''))\n#set ($accessTokenType = $model.getTicketAttributeValue('accessTokenType').replaceAll('\\s+', ''))\n#set ($accessTokenExpires = $model.getTicketAttributeValue('accessTokenExpires').replaceAll('\\s+', ''))\n#set ($xibm_client_id = $model.getTicketAttributeValue('X-IBM-Client-Id').replaceAll('\\s+', ''))\nINSERT INTO ebonding.client_connector_tokens_metlife (access_token, token_type, expiry_date, xibm_client_id) values(\"$accessToken\",\"$accessTokenType\",from_unixtime(\"$accessTokenExpires\"),\"$xibm_client_id\")"},{"name":"endpoint","templateEngine":"VELOCITY","template":"$model.getTicketAttributeValue('tokenDbEndpoint')"},{"name":"ignore","templateEngine":"VELOCITY","template":"#if($model.lastLog.getTicketAttributeValue('TOKENDB.connector.IPC.retrieve/IgnoreReason'))\r\n    TOKENDB.connector.IPC.retrieve was ignored\r\n#end"},{"name":"database_username","templateEngine":"VELOCITY","template":"$model.getTicketAttributeValue('tokenDbUser')"},{"name":"database_password","templateEngine":"VELOCITY","template":"$model.getTicketAttributeValue('tokenDbPass')"}],"extractors":[{"attributeValidators":[],"attributeName":"RequestBody","template":"$request.body","pattern":"","templateEngine":"VELOCITY","phase":"request","type":"whole","global":false,"masked":false},{"attributeValidators":[],"attributeName":"ResponseBody","template":"$response.body","pattern":"","templateEngine":"VELOCITY","phase":"response","type":"whole","global":false,"masked":false}],"action":"POST","triggerType":"outgoing","connectorType":"database","allActions":[],"allParameters":["body","endpoint","ignore","database_username","database_password"],"allExtractors":[]},{"connectorID":78,"name":"SNOW.connector.IPC.resolve.handler","parameters":[{"name":"body","templateEngine":"VELOCITY","template":"{\n    \"RadarTicket\": {\n        \"ticketID\":\"$model.radarTicket.ticketID\",\n        \"client\":\"$model.radarTicket.client.getClientName().toLowerCase()\",\n        \"status\": {\n            \"statusType\":\"Resolved\"\n        },\n        \"ipimTicket\": {\n            \"post\":\"Problem Close:  Problem Ticket type resolultion EBTL events currently don't self-close. Handling via relay\"\n        }\n    }\n}"},{"name":"endpoint","templateEngine":"VELOCITY","template":"https://api-ipcenter-dv.metlife.com/IPradar/v3/ticket/import"},{"name":"ignore","templateEngine":"VELOCITY","template":"## \n###if(!$model.lastLog.status.contains(\"RESOLVED\"))\n###if(!$model.radarTicket.IPimTicketMapping.ipimticket.status.contains(\"resolve\"))\n## added below to test the rest. \n###if(!$model.radarTicket.ipimTicketMapping.ipimTicket.getQueue().getName().endsWith('-problem-mgmt'))\n###if ($model.lastLog.getAction() == \"PROBLEM_RESOLVE\")\n#if(!$model.lastLog.description.contains(\"resol\"))\nNot resolution action. \nlastlog: $model.lastLog.description\nProblem status:          (Ignoring: $model.radarTicket.getIppmProblem().getStatus())\nRadar Ticket status:     $model.radarTicket.status\nIPim status:             $model.radarTicket.ipimTicketMapping.ipimTicket.status\n##seems to break here?  at the comment?\n##lastLog comment:         $model.lastLog.getTicketAttributeValue('Comment')\nlastLog description:     $model.lastLog.description\n#end"},{"name":"Content-Type","templateEngine":"STATIC","template":"application/json"},{"name":"Authorization","templateEngine":"VELOCITY","template":"Basic aXBhcGk6UEBzc3dvcmQxMjM0NQ=="}],"extractors":[{"attributeValidators":[],"attributeName":"RequestBody","template":"$request.body","pattern":"","templateEngine":"VELOCITY","phase":"request","type":"whole","global":false,"masked":false},{"attributeValidators":[],"attributeName":"ResponseBody","template":"$response.body","pattern":"","templateEngine":"VELOCITY","phase":"response","type":"whole","global":false,"masked":false},{"attributeValidators":[],"attributeName":"debugLogs","template":"debug logs\n##$model.radarTicket.ippmProblem.get(0).getStatus()\nProblem status:          (Ignoring: $model.radarTicket.getIppmProblem().getStatus() )\nRadar Ticket status:     $model.$model.radarTicket.status\nIPim status:             $model.radarTicket.ipimTicketMapping.ipimTicket.getTicketAttributeValue('Status')\n##seems to break here?  at the comment?\nlastLog comment:         $model.lastLog.getTicketAttributeValue('Comment')\nlastLog description:     $model.lastLog.ipimTicketMapping.ipimTicket.getTicketAttributeValue('description')","pattern":"","templateEngine":"VELOCITY","phase":"final","type":"whole","global":false,"masked":false}],"action":"POST","triggerType":"incoming","connectorType":"http","allActions":["GET","POST","PUT","DELETE","PATCH"],"allParameters":["body","endpoint","ignore"],"allExtractors":[{"attributeValidators":null,"attributeName":"RequestBody","template":"$request.body","pattern":null,"templateEngine":"VELOCITY","phase":"request","type":"whole","global":false,"masked":false},{"attributeValidators":null,"attributeName":"ResponseBody","template":"$response.body","pattern":null,"templateEngine":"VELOCITY","phase":"response","type":"whole","global":false,"masked":false}]},{"connectorID":80,"name":"QA__SNOW.connector.IPC.resolve.handler_internal","parameters":[{"name":"body","templateEngine":"VELOCITY","template":"{\n    \"RadarTicket\": {\n        \"ticketID\":\"$model.radarTicket.ticketID\",\n        \"client\":\"$model.radarTicket.client.getClientName().toLowerCase()\",\n        \"status\": {\n            \"statusType\":\"Resolved\"\n        },\n        \"ipimTicket\": {\n            \"post\":\"Problem Close:  Problem Ticket type resolultion EBTL events currently don't self-close. Handling via relay\"\n        }\n    }\n}"},{"name":"endpoint","templateEngine":"STATIC","template":"https://api-ipcenter-dv.metlife.com/IPradar/v3/ticket/import"},{"name":"ignore","templateEngine":"VELOCITY","template":"## \n###if(!$model.lastLog.status.contains(\"RESOLVED\"))\n###if(!$model.radarTicket.IPimTicketMapping.ipimticket.status.contains(\"resolved\"))\n## added below to test the rest. \n###if(!$model.radarTicket.ipimTicketMapping.ipimTicket.getQueue().getName().endsWith('-problem-mgmt'))\n#if ($model.lastLog.getAction() != \"PROBLEM_RESOLVE\")\nNot resolution action. \nProblem status:          (Ignoring: $model.radarTicket.getIppmProblem().getStatus())\nRadar Ticket status:     $model.radarTicket.status\nIPim status:             $model.radarTicket.ipimTicketMapping.ipimTicket.status\n##seems to break here?  at the comment?\n##lastLog comment:         $model.lastLog.getTicketAttributeValue('Comment')\nlastLog description:     $model.lastLog.description\n#end"},{"name":"Content-Type","templateEngine":"STATIC","template":"application/json"},{"name":"Authorization","templateEngine":"VELOCITY","template":"Basic aXBhcGk6UEBzc3dvcmQxMjM0NQ=="}],"extractors":[{"attributeValidators":[],"attributeName":"RequestBody","template":"$request.body","pattern":"","templateEngine":"VELOCITY","phase":"request","type":"whole","global":false,"masked":false},{"attributeValidators":[],"attributeName":"ResponseBody","template":"$response.body","pattern":"","templateEngine":"VELOCITY","phase":"response","type":"whole","global":false,"masked":false},{"attributeValidators":[],"attributeName":"debugStuff","template":"debug logs\n##$model.radarTicket.ippmProblem.get(0).getStatus()\nProblem status:          (Ignoring: $model.radarTicket.getIppmProblem().getStatus() )\nRadar Ticket status:     $model.$model.radarTicket.status\nIPim status:             $model.radarTicket.ipimTicketMapping.ipimTicket.getTicketAttributeValue('Status')\n##seems to break here?  at the comment?\nlastLog comment:         $model.lastLog.getTicketAttributeValue('Comment')\nlastLog description:     $model.lastLog.ipimTicketMapping.ipimTicket.getTicketAttributeValue('description')","pattern":"","templateEngine":"VELOCITY","phase":"final","type":"whole","global":false,"masked":false}],"action":"POST","triggerType":"outgoing","connectorType":"http","allActions":["GET","POST","PUT","DELETE","PATCH"],"allParameters":["body","endpoint","ignore"],"allExtractors":[{"attributeValidators":null,"attributeName":"RequestBody","template":"$request.body","pattern":null,"templateEngine":"VELOCITY","phase":"request","type":"whole","global":false,"masked":false},{"attributeValidators":null,"attributeName":"ResponseBody","template":"$response.body","pattern":null,"templateEngine":"VELOCITY","phase":"response","type":"whole","global":false,"masked":false}]}],"connectorTriggers":[{"state":"OPEN","event":"OPEN","connector":{"connectorID":74,"name":"TOKENDB.connector.IPC.check","connectorType":"database"},"rank":2},{"state":"OPEN","event":"PROBLEM_CREATE","connector":{"connectorID":74,"name":"TOKENDB.connector.IPC.check","connectorType":"database"},"rank":2},{"state":"OPEN","event":"PROBLEM_UPDATE","connector":{"connectorID":74,"name":"TOKENDB.connector.IPC.check","connectorType":"database"},"rank":2},{"state":"OPEN","event":"PROBLEM_RESOLVE","connector":{"connectorID":74,"name":"TOKENDB.connector.IPC.check","connectorType":"database"},"rank":2},{"state":"UNBONDED","event":"PROBLEM_CREATE","connector":{"connectorID":74,"name":"TOKENDB.connector.IPC.check","connectorType":"database"},"rank":2},{"state":"RESOLVED","event":"PROBLEM_UPDATE","connector":{"connectorID":74,"name":"TOKENDB.connector.IPC.check","connectorType":"database"},"rank":2},{"state":"UNBONDED","event":"OPEN","connector":{"connectorID":74,"name":"TOKENDB.connector.IPC.check","connectorType":"database"},"rank":2},{"state":"OPEN","event":"CLOSE","connector":{"connectorID":74,"name":"TOKENDB.connector.IPC.check","connectorType":"database"},"rank":2},{"state":"OPEN","event":"RESOLVE","connector":{"connectorID":74,"name":"TOKENDB.connector.IPC.check","connectorType":"database"},"rank":2},{"state":"OPEN","event":"COMMENT","connector":{"connectorID":74,"name":"TOKENDB.connector.IPC.check","connectorType":"database"},"rank":2},{"state":"OPEN","event":"UPDATE","connector":{"connectorID":74,"name":"TOKENDB.connector.IPC.check","connectorType":"database"},"rank":2},{"state":"OPEN","event":"PROBLEM_RESOLVE","connector":{"connectorID":75,"name":"TOKENDB.connector.IPC.retrieve","connectorType":"http"},"rank":3},{"state":"UNBONDED","event":"PROBLEM_CREATE","connector":{"connectorID":75,"name":"TOKENDB.connector.IPC.retrieve","connectorType":"http"},"rank":3},{"state":"OPEN","event":"PROBLEM_UPDATE","connector":{"connectorID":75,"name":"TOKENDB.connector.IPC.retrieve","connectorType":"http"},"rank":3},{"state":"RESOLVED","event":"PROBLEM_UPDATE","connector":{"connectorID":75,"name":"TOKENDB.connector.IPC.retrieve","connectorType":"http"},"rank":3},{"state":"OPEN","event":"PROBLEM_CREATE","connector":{"connectorID":75,"name":"TOKENDB.connector.IPC.retrieve","connectorType":"http"},"rank":3},{"state":"OPEN","event":"COMMENT","connector":{"connectorID":75,"name":"TOKENDB.connector.IPC.retrieve","connectorType":"http"},"rank":3},{"state":"UNBONDED","event":"OPEN","connector":{"connectorID":75,"name":"TOKENDB.connector.IPC.retrieve","connectorType":"http"},"rank":3},{"state":"OPEN","event":"RESOLVE","connector":{"connectorID":75,"name":"TOKENDB.connector.IPC.retrieve","connectorType":"http"},"rank":3},{"state":"OPEN","event":"UPDATE","connector":{"connectorID":75,"name":"TOKENDB.connector.IPC.retrieve","connectorType":"http"},"rank":3},{"state":"OPEN","event":"CLOSE","connector":{"connectorID":75,"name":"TOKENDB.connector.IPC.retrieve","connectorType":"http"},"rank":3},{"state":"OPEN","event":"OPEN","connector":{"connectorID":75,"name":"TOKENDB.connector.IPC.retrieve","connectorType":"http"},"rank":3},{"state":"OPEN","event":"CLOSE","connector":{"connectorID":76,"name":"TOKENDB.connector.IPC.store","connectorType":"database"},"rank":4},{"state":"UNBONDED","event":"PROBLEM_CREATE","connector":{"connectorID":76,"name":"TOKENDB.connector.IPC.store","connectorType":"database"},"rank":4},{"state":"OPEN","event":"OPEN","connector":{"connectorID":76,"name":"TOKENDB.connector.IPC.store","connectorType":"database"},"rank":4},{"state":"RESOLVED","event":"PROBLEM_UPDATE","connector":{"connectorID":76,"name":"TOKENDB.connector.IPC.store","connectorType":"database"},"rank":4},{"state":"OPEN","event":"PROBLEM_CREATE","connector":{"connectorID":76,"name":"TOKENDB.connector.IPC.store","connectorType":"database"},"rank":4},{"state":"OPEN","event":"RESOLVE","connector":{"connectorID":76,"name":"TOKENDB.connector.IPC.store","connectorType":"database"},"rank":4},{"state":"OPEN","event":"PROBLEM_RESOLVE","connector":{"connectorID":76,"name":"TOKENDB.connector.IPC.store","connectorType":"database"},"rank":4},{"state":"UNBONDED","event":"OPEN","connector":{"connectorID":76,"name":"TOKENDB.connector.IPC.store","connectorType":"database"},"rank":4},{"state":"OPEN","event":"PROBLEM_UPDATE","connector":{"connectorID":76,"name":"TOKENDB.connector.IPC.store","connectorType":"database"},"rank":4},{"state":"OPEN","event":"UPDATE","connector":{"connectorID":76,"name":"TOKENDB.connector.IPC.store","connectorType":"database"},"rank":4},{"state":"OPEN","event":"COMMENT","connector":{"connectorID":76,"name":"TOKENDB.connector.IPC.store","connectorType":"database"},"rank":4},{"state":"UNBONDED","event":"PROBLEM_CREATE","connector":{"connectorID":61,"name":"SNOW.connector.IPC.create","connectorType":"http"},"rank":5},{"state":"OPEN","event":"PROBLEM_CREATE","connector":{"connectorID":61,"name":"SNOW.connector.IPC.create","connectorType":"http"},"rank":5},{"state":"UNBONDED","event":"OPEN","connector":{"connectorID":61,"name":"SNOW.connector.IPC.create","connectorType":"http"},"rank":5},{"state":"OPEN","event":"PROBLEM_UPDATE","connector":{"connectorID":73,"name":"SNOW.connector.IPC.update","connectorType":"http"},"rank":6},{"state":"OPEN","event":"PROBLEM_UPDATE","connector":{"connectorID":78,"name":"SNOW.connector.IPC.resolve.handler","connectorType":"http"},"rank":8}]}